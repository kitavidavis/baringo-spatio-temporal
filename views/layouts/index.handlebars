<!DOCTYPE html>
<html lang="en"> 
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<!-- Tell the browser to be responsive to screen width -->
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="description" content="">
<meta name="author" content="">

<title>Lake Baringo Water level transformations</title> 
<link rel="shortcut icon" href="favicon.ico"> 
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<script defer src="/home/js/font-awesome/all.min.js"></script>

<link id="theme-style" rel="stylesheet" href="/home/css/home.css">

<link rel="stylesheet" type="text/css" href="https://rawgit.com/vitmalina/w2ui/master/dist/w2ui.min.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
crossorigin=""/>

<link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-fullscreen/v1.0.1/leaflet.fullscreen.css' rel='stylesheet' />
<style>
.no-wrap {
    background: rgb(241, 238, 238);
    overflow-x: hidden;
}
#map {
    width: 100%;
}

#loader {
    border: 4px solid #000;
    border-radius: 50%;
    border-top: 4px solid #3498db;
    width: 50px;
    height: 50px;
    -webkit-animation: spin 2s linear infinite; /* Safari */
    animation: spin 2s linear infinite;
    
}

@-webkit-keyframes spin {
  0% { -webkit-transform: rotate(0deg); }
  100% { -webkit-transform: rotate(360deg); }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

		table {
			border: 1px solid black;
			border-collapse: collapse;
		}
		td {
			border: 1px solid black;
		}

		.legend {
			padding: 6px 18px;
			background-color: rgba(255,255,255,0.8);
			box-shadow: 0 0 15px rgba(0,0,0,0.2);
			border-radius: 5px;
		}
		.legend i {
			width: 18px;
			height: 18px;
			float: left;
			margin-right: 8px;
			opacity: 0.7;
		}
		div.legend.leaflet-control br {
			clear: both;
		}
	</style>
</head> 

<body class="no-wrap">   	

<div >

<div >
<div>

{{{body}}}

</div>
</div>

</div>    					

<script src="https://code.jquery.com/jquery-3.6.0.js"></script>
<script type="text/javascript" src="/home/js/shp/shp.js"></script>
<script src="/home/js/bootstrap.min.js"></script> 
<script src="/home/js/home.js"></script>  
<script type="text/javascript" src="https://rawgit.com/vitmalina/w2ui/master/dist/w2ui.min.js"></script>
<script type="text/javascript" src="/home/js/jquery.toast.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<script src='https://cdn.jsdelivr.net/npm/sweetalert2@11'></script>
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
crossorigin=""></script>
<script src="/leaflet.ajax.min.js" ></script>
<script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-fullscreen/v1.0.1/Leaflet.fullscreen.min.js'></script>
<script src="/home/js/app.js"></script>
<script src="https://unpkg.com/georaster"></script>
<script src="https://unpkg.com/proj4"></script>
<script src="https://unpkg.com/georaster-layer-for-leaflet"></script>
<Script src="/js/leaflet-side-by-side.js"></Script>
<script type="text/javascript">

var map;
var CartoDB;
var osm;
var geo2;
var lc;
var sbs;

// compariosn
let map1;
let map2;

$('#chart-div').show();
//==========================
$(window).on("resize", function () { $("#map-div").height($(window).height() * 2/3 - 50 ); }).trigger("resize");
$(window).on("resize", function () { $("#map").height($(window).height() * 2/3 - 50 ); }).trigger("resize");
$(window).on("resize", function () { $("#chart-div").height($(window).height() * 1/3  ); }).trigger("resize");
$(window).on("resize", function () { $("#canvas").height($(window).height() * 1/3  ); }).trigger("resize");
$(window).on("resize", function () { $("#canvas2").height($(window).height() * 1/3 - 50 ); }).trigger("resize");
if(localStorage.getItem('time') === null){
    localStorage.setItem('time', 3000);
}
//===============================================================================

function setAnimationTime () {
    if (!w2ui.foo) {
        $().w2form({
            name: 'foo',
            style: 'border: 0px; background-color: transparent;',
            fields: [
                            { field: 'anim_time', type: 'int',
                html: {
                    label: 'Speed(seconds)',
                    attr: 'style="width: 80%"'
                },
                options: {
                    arrows: true,
                    min: 1,
                    max: 10
                }
            }
            ],
            records: [
            
            ],
            actions: {
                "Reset": function () { this.clear(); },
                "Save": function () {
                    w2popup.close();
                    var time = $('#anim_time').val();

                    localStorage.setItem('time', time * 1000);
                }
            }
        });
    }
    w2popup.open({
        title   : 'Set animation speed',
        body    : '<div id="form" style="width: 100%; height: 100%;"></div>',
        style   : 'padding: 15px 0px 0px 0px',
        width   : 500,
        height  : 280,
        showMax : true,
        onToggle: function (event) {
            $(w2ui.foo.box).hide();
            event.onComplete = function () {
                $(w2ui.foo.box).show();
                w2ui.foo.resize();
            }
        },
        onOpen: function (event) {
            event.onComplete = function () {
                // specifying an onOpen handler instead is equivalent to specifying an onBeforeOpen handler, which would make this code execute too early and hence not deliver.
                $('#w2ui-popup #form').w2render('foo');
            }
        }
    });
}

$(function () {
    $('#toolbar').w2toolbar({
        name: 'toolbar',
        items: [
            { type: 'button', id: 'play_time', text: 'Change animation speed' },
            { type: 'break' },
            { type: 'button', id: 'full', text: 'Full Screen' },
            
        ],
        onClick: function (event) {
            if(event.target == 'play_time'){
				setAnimationTime();
            }

			if(event.target == 'full'){
				map.toggleFullscreen()
			}
        }
    });
});

var population;
var landcover;
var lc;
var rasterLayers = [];
var _layer1995;
var _layer2000;
var _layer2005;
var _layer2010;
var _layer2015;
var _layer2020;

var currentLayer = [];

if(localStorage.getItem('status') === null){
    localStorage.setItem('status', 'landcover');
}

if(localStorage.getItem('status') == 'landcover'){
// loading all lc data without adding it to map;
async function loadOne(){
            let a = 1995;
            let landcover = 'LC'+a;
            let dataname = 'LC'+a+'.tif';
                // adding the cleaned data.
            let file = '/data/revised_cleaned/revised_cleaned/'+dataname;
            let blob = await fetch(file).then(r => r.blob());
            let reader = new FileReader();
            reader.readAsArrayBuffer(blob); 
            reader.onloadend = function() {
            let arrayBuffer = reader.result;
            parseGeoraster(arrayBuffer).then(georaster => {
               
            /*
                GeoRasterLayer is an extension of GridLayer,
                which means can use GridLayer options like opacity.
                Just make sure to include the georaster option!
                http://leafletjs.com/reference-1.2.0.html#gridlayer
            */
            _layer1995 = new GeoRasterLayer({
                georaster: georaster,
                opacity: 0.7,
                pixelValuesToColorFn: values => values[0] === 1 ? 'blue' : values[0] === 2 ? 'yellow' : values[0] === 3 ? '#4E9F3D' : values[0] === 4 ? '#191919': values[0] === 5 ? '#4C74C9' : values[0] === 6 ? '#A9C52F' : values[0] === 7 ? '#F14A16' : values[0] === 8 ? '#9E9D89' : null ,
                resolution: 256
            });
            
                       rasterLayers.push('LC 1995');

                       progressText();
            
            });

            }
}
loadOne();

async function loadTwo(){
            let a = 2000;
            let landcover = 'LC'+a;
            let dataname = 'LC'+a+'.tif';
                // adding the cleaned data.
            let file = '/data/revised_cleaned/revised_cleaned/'+dataname;
            let blob = await fetch(file).then(r => r.blob());
            let reader = new FileReader();
            reader.readAsArrayBuffer(blob); 
            reader.onloadend = function() {
            let arrayBuffer = reader.result;
            parseGeoraster(arrayBuffer).then(georaster => {

            /*
                GeoRasterLayer is an extension of GridLayer,
                which means can use GridLayer options like opacity.
                Just make sure to include the georaster option!
                http://leafletjs.com/reference-1.2.0.html#gridlayer
            */
            _layer2000 = new GeoRasterLayer({
                georaster: georaster,
                opacity: 0.7,
                pixelValuesToColorFn: values => values[0] === 1 ? 'blue' : values[0] === 2 ? 'yellow' : values[0] === 3 ? '#4E9F3D' : values[0] === 4 ? '#191919': values[0] === 5 ? '#4C74C9' : values[0] === 6 ? '#A9C52F' : values[0] === 7 ? '#F14A16' : values[0] === 8 ? '#9E9D89' : null ,
                resolution: 256
            });
            //layer.addTo(map);
                       rasterLayers.push('LC 2000');

            
            });

            }
}
loadTwo();

async function loadThree(){
            let a = 2005;
            let landcover = 'LC'+a;
            let dataname = 'LC'+a+'.tif';
                // adding the cleaned data.
            let file = '/data/revised_cleaned/revised_cleaned/'+dataname;
            let blob = await fetch(file).then(r => r.blob());
            let reader = new FileReader();
            reader.readAsArrayBuffer(blob); 
            reader.onloadend = function() {
            let arrayBuffer = reader.result;
            parseGeoraster(arrayBuffer).then(georaster => {

            /*
                GeoRasterLayer is an extension of GridLayer,
                which means can use GridLayer options like opacity.
                Just make sure to include the georaster option!
                http://leafletjs.com/reference-1.2.0.html#gridlayer
            */
            _layer2005 = new GeoRasterLayer({
                georaster: georaster,
                opacity: 0.7,
                pixelValuesToColorFn: values => values[0] === 1 ? 'blue' : values[0] === 2 ? 'yellow' : values[0] === 3 ? '#4E9F3D' : values[0] === 4 ? '#191919': values[0] === 5 ? '#4C74C9' : values[0] === 6 ? '#A9C52F' : values[0] === 7 ? '#F14A16' : values[0] === 8 ? '#9E9D89' : null ,
                resolution: 256
            });
            //layer.addTo(map);
                       rasterLayers.push('LC 2005');

            
            });

            }
}
loadThree();

async function loadFour(){
            let a = 2010;
            let landcover = 'LC'+a;
            let dataname = 'LC'+a+'.tif';
                // adding the cleaned data.
            let file = '/data/revised_cleaned/revised_cleaned/'+dataname;
            let blob = await fetch(file).then(r => r.blob());
            let reader = new FileReader();
            reader.readAsArrayBuffer(blob); 
            reader.onloadend = function() {
            let arrayBuffer = reader.result;
            parseGeoraster(arrayBuffer).then(georaster => {

            /*
                GeoRasterLayer is an extension of GridLayer,
                which means can use GridLayer options like opacity.
                Just make sure to include the georaster option!
                http://leafletjs.com/reference-1.2.0.html#gridlayer
            */
            _layer2010 = new GeoRasterLayer({
                georaster: georaster,
                opacity: 0.7,
                pixelValuesToColorFn: values => values[0] === 1 ? 'blue' : values[0] === 2 ? 'yellow' : values[0] === 3 ? '#4E9F3D' : values[0] === 4 ? '#191919': values[0] === 5 ? '#4C74C9' : values[0] === 6 ? '#A9C52F' : values[0] === 7 ? '#F14A16' : values[0] === 8 ? '#9E9D89' : null ,
                resolution: 256
            });
            //layer.addTo(map);

                        rasterLayers.push('LC 2010');

            
            });

            }
}
loadFour();

async function loadFive(){
            let a = 2015;
            let landcover = 'LC'+a;
            let dataname = 'LC'+a+'.tif';
                // adding the cleaned data.
            let file = '/data/revised_cleaned/revised_cleaned/'+dataname;
            let blob = await fetch(file).then(r => r.blob());
            let reader = new FileReader();
            reader.readAsArrayBuffer(blob); 
            reader.onloadend = function() {
            let arrayBuffer = reader.result;
            parseGeoraster(arrayBuffer).then(georaster => {

            /*
                GeoRasterLayer is an extension of GridLayer,
                which means can use GridLayer options like opacity.
                Just make sure to include the georaster option!
                http://leafletjs.com/reference-1.2.0.html#gridlayer
            */
            _layer2015 = new GeoRasterLayer({
                georaster: georaster,
                opacity: 0.7,
                pixelValuesToColorFn: values => values[0] === 1 ? 'blue' : values[0] === 2 ? 'yellow' : values[0] === 3 ? '#4E9F3D' : values[0] === 4 ? '#191919': values[0] === 5 ? '#4C74C9' : values[0] === 6 ? '#A9C52F' : values[0] === 7 ? '#F14A16' : values[0] === 8 ? '#9E9D89' : null ,
                resolution: 256
            });
            //layer.addTo(map);

                        rasterLayers.push('LC 2015');

            
            });

            }
}
loadFive();

async function loadSix(){
            let a = 2020;
            let landcover = 'LC'+a;
            let dataname = 'LC'+a+'.tif';
                // adding the cleaned data.
            let file = '/data/revised_cleaned/revised_cleaned/'+dataname;
            let blob = await fetch(file).then(r => r.blob());
            let reader = new FileReader();
            reader.readAsArrayBuffer(blob); 
            reader.onloadend = function() {
            let arrayBuffer = reader.result;
            parseGeoraster(arrayBuffer).then(georaster => {
                 
            /*
                GeoRasterLayer is an extension of GridLayer,
                which means can use GridLayer options like opacity.
                Just make sure to include the georaster option!
                http://leafletjs.com/reference-1.2.0.html#gridlayer
            */
            _layer2020 = new GeoRasterLayer({
                georaster: georaster,
                opacity: 0.7,
                pixelValuesToColorFn: values => values[0] === 1 ? 'blue' : values[0] === 2 ? 'yellow' : values[0] === 3 ? '#4E9F3D' : values[0] === 4 ? '#191919': values[0] === 5 ? '#4C74C9' : values[0] === 6 ? '#A9C52F' : values[0] === 7 ? '#F14A16' : values[0] === 8 ? '#9E9D89' : null ,
                resolution: 256
            });
            //layer.addTo(map);
            _layer2020.addTo(map);
            console.log(_layer2020);
            
            var legend = L.control({position: 'bottomright'});
            legend.onAdd = function (map) {

                var div = L.DomUtil.create('div', 'info legend');
                labels = ['<strong>Classes</strong>'],
                categories = ['Water Body','CropLand','Forest Land','Settlement','Vegetated Wetland', 'Open Grassland', 'Wooded Grassland', 'Otherlands'];
                var colors = ['blue', 'yellow', '#4E9F3D', '#191919', '#4C74C9', '#A9C52F', '#F14A16', '#9E9D89']
                for (var i = 0; i < categories.length; i++) {
                    for(var k=0; k < colors.length; k++){
                        if(i === k){
                        div.innerHTML += 
                        labels.push(
                            '<i style="background:' + colors[k] + '"></i> ' +
                            (categories[i] ? categories[i] : '+'));
                        }
                    }
                    }

                div.innerHTML = labels.join('<br>');
                return div;
            };

            legend.addTo(map);

            currentLayer.push(_layer2020);
            rasterLayers.push('LC 2020'); 
            progressText();

                  });
            }
}
loadSix();
} else if(localStorage.getItem('status') == 'population') {

} else {

}

localStorage.setItem('textbox', 0);
function progressText(){
var text;

if(rasterLayers.length < 4){
    w2ui.sidebar.disable('1995l')
    w2ui.sidebar.disable('2000l')
    w2ui.sidebar.disable('2005l')
    w2ui.sidebar.disable('2010l')
    w2ui.sidebar.disable('2015l')
    w2ui.sidebar.disable('2020l')
      w2ui.sidebar.disable('animate')
} else{
     w2ui.sidebar.enable('1995l')
    w2ui.sidebar.enable('2000l')
    w2ui.sidebar.enable('2005l')
    w2ui.sidebar.enable('2010l')
    w2ui.sidebar.enable('2015l')
    w2ui.sidebar.enable('2020l')
      w2ui.sidebar.enable('animate')

       w2ui.sidebar.click('1995l');
           w2ui.sidebar.select('1995l');
           document.getElementById('loader').remove();
}
L.Control.textbox = L.Control.extend({
onAdd: function(map) {

text = L.DomUtil.create('div');
text.id = "info_text";
text.style.background = '#fff';
if(rasterLayers.length < 4){
   text.innerHTML = "<div id='loader'></div>" 
} else {
    text.innerHTML = '';
    text.innerHTML = "Loading complete..."
}
return text;
},

onRemove: function(map) {
        // Nothing to do here
    }
});
L.control.textbox = function(opts) { return new L.Control.textbox(opts);}
L.control.textbox({ position: 'topleft' }).addTo(map);


}
//==============================================================================
$(function () {
    $(window).on("resize", function () { $("#sidebar").height($(window).height() ); }).trigger("resize");
    $('#sidebar').w2sidebar({
        name : 'sidebar',
        nodes:[
            { id: 'land', text: 'Land Cover', expanded: true, selected: true,
				nodes: [ 	{ id: '1995l', text: '1995' },
                            { id: '2000l', text: '2000'},
						    { id: '2005l', text: '2005' },
                            { id: '2010l', text: '2010'},
		                    { id: '2015l', text: '2015'},
                            { id: '2020l', text: '2020'},
                            { id: 'compare-land', text: 'Compare'},
                            { id: 'animate', text: 'Play changes', icon:"fa fa-video"}
                            
						]
            },
            { id: 'population', text: 'Population',expanded: false, 
                nodes: [
                    {id: '2000p', text: '2000'},
                    {id: '2005p', text: '2005'},
                    {id: '2010p', text: '2010'},
                    {id: '2015p', text: '2015'},
                    {id: '2020p', text: '2020'},
                    { id: 'compare-popz', text: 'Compare'},
                    { id: 'animate-population', text: 'Play changes', icon:"fa fa-video"}
                ]
            },
            { id: 'erosion', text: 'Erosion', expanded: false,
                nodes: [
                    //{id: '1995ee', text: '1995'},
                    {id: '2000ee', text: '2000'},
                    {id:'2005ee', text: '2005'},
                    {id:'2010ee', text: '2010'},
                    {id: '2015ee', text: '2015'},
                    {id: '2020ee', text: '2020'},
                          { id: 'compare-erosion', text: 'Compare'},
                    {id: 'animate_risk', text: 'Play changes', icon: 'fa fa-video'}
              
                ]
            }
            
		],
        onClick: async function(event){
			//$('#main').hide();
			//$('#sub').show();
			var category = event.target;

            $('#map-comparison').hide();
            $('#chart-div').show();
            $('#map').show();

            if(category[category.length - 1] === 'l'){
            var a = category.slice(0, -1);

            if(a == 1995){
                 map.removeLayer(currentLayer[0]);
                 currentLayer.pop();
                _layer1995.addTo(map);
           currentLayer.push(_layer1995)
           var xValues = [" Water Body", "CropLand", "Forestland", "Settlement", "Vegetated Wetland", "Open Grassland", "Wooded Grassland", "Others"];
            var yValues = [120.60, 966.14, 972.80, 156.58, 13.99, 739.59, 3692.63, 0.67];
            var barColors =  ['blue', 'yellow', '#4E9F3D', '#191919', '#4C74C9', '#A9C52F', '#F14A16', '#9E9D89'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Baringo Landcover statistics - 1995"
                }
            }
            });
            compareYears('1995', '2020');
            }

            if(a == 2000){
                map.removeLayer(currentLayer[0]);
                currentLayer.pop();
                _layer2000.addTo(map);

            currentLayer.push(_layer2000)

                       var xValues = [" Water Body", "CropLand", "Forestland", "Settlement", "Vegetated Wetland", "Open Grassland", "Wooded Grassland", "Others"];
            var yValues = [130.59, 2318.06, 600.34, 269.85, 22.65, 678.29, 2639.21, 4.00];
            var barColors =  ['blue', 'yellow', '#4E9F3D', '#191919', '#4C74C9', '#A9C52F', '#F14A16', '#9E9D89'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Baringo Landcover statistics - 2000"
                }
            }
            });

            compareYears('2000', '2020');
            }

            if(a == 2005){
                map.removeLayer(currentLayer[0]);
                currentLayer.pop();
                _layer2005.addTo(map);
                

             currentLayer.push(_layer2005)

            var xValues = [" Water Body", "CropLand", "Forestland", "Settlement", "Vegetated Wetland", "Open Grassland", "Wooded Grassland", "Others"];
            var yValues = [135.26, 2379.36, 663.63, 135.93, 20.66, 664.97, 2663.20, 0.67];
            var barColors =  ['blue', 'yellow', '#4E9F3D', '#191919', '#4C74C9', '#A9C52F', '#F14A16', '#9E9D89'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Baringo Landcover statistics - 2005"
                }
            }
            });

            compareYears('2005', '2020');
            }

            if(a == 2010){
                 map.removeLayer(currentLayer[0]);
                 currentLayer.pop();
                _layer2010.addTo(map);

             currentLayer.push(_layer2010)

            var xValues = [" Water Body", "CropLand", "Forestland", "Settlement", "Vegetated Wetland", "Open Grassland", "Wooded Grassland", "Others"];
            var yValues = [143.25, 1559.14, 840.87, 139.26, 2.67, 1429.21, 2547.93, 1.33];
            var barColors =  ['blue', 'yellow', '#4E9F3D', '#191919', '#4C74C9', '#A9C52F', '#F14A16', '#9E9D89'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Baringo Landcover statistics - 2010"
                }
            }
            });

            compareYears('2010', '2020');
            }

            if(a == 2015){
                map.removeLayer(currentLayer[0]);
                currentLayer.pop();
                _layer2015.addTo(map);
                
            currentLayer.push(_layer2015)

            var xValues = [" Water Body", "CropLand", "Forestland", "Settlement", "Vegetated Wetland", "Open Grassland", "Wooded Grassland", "Others"];
            var yValues = [247.86, 1681.74, 572.35, 206.55, 76.62, 273.85, 3602.02, 2.00];
            var barColors =  ['blue', 'yellow', '#4E9F3D', '#191919', '#4C74C9', '#A9C52F', '#F14A16', '#9E9D89'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Baringo Landcover statistics - 2015"
                }
            }
            });
            compareYears('2015', '2020')
              
            }

            if(a == 2020){
               map.removeLayer(currentLayer[0]);
               currentLayer.pop();
         _layer2020.addTo(map);
                
             currentLayer.push(_layer2020)

            var xValues = [" Water Body", "CropLand", "Forestland", "Settlement", "Vegetated Wetland", "Open Grassland", "Wooded Grassland", "Others"];
            var yValues = [206.55, 1620.44, 974.80, 63.30, 32.65, 142.59, 3615.34, 6.66];
            var barColors =  ['blue', 'yellow', '#4E9F3D', '#191919', '#4C74C9', '#A9C52F', '#F14A16', '#9E9D89'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Baringo Landcover statistics - 2020"
                }
            }
            });
            compareYears('2020', '1995');
            }

            }

            if(category == 'animate'){
               var time = localStorage.getItem('time');

               const sleep = (milliseconds) => {
                return new Promise(resolve => setTimeout(resolve, milliseconds))
                }

               var layers = ['1995l', '2000l', '2005l', '2010l', '2015l', '2020l'];

            const loadData = async () => {
                for (const item of layers) {
                    await sleep(time)
                   w2ui.sidebar.click(item);
                }
                }

                loadData()
            }

            if(category === 'animate-population'){
                var time = localStorage.getItem('time');

               const sleep = (milliseconds) => {
                return new Promise(resolve => setTimeout(resolve, milliseconds))
                }

               var layers = ['2000p', '2005p', '2010p', '2015p', '2020p'];

            const loadData = async () => {
                for (const item of layers) {
                    await sleep(time)
                   w2ui.sidebar.click(item);
                }
                }

                loadData()
            }

            if(category === 'animate_risk'){
                var time = localStorage.getItem('time');

               const sleep = (milliseconds) => {
                return new Promise(resolve => setTimeout(resolve, milliseconds))
                }

               var layers = ['2000ee', '2005ee', '2010ee', '2015ee', '2020ee'];

            const loadData = async () => {
                for (const item of layers) {
                    await sleep(time)
                   w2ui.sidebar.click(item);
                }
                }

                loadData()
            }

            if(category[category.length - 1] === 'p') {
            var a = category.slice(0, -1); 

            loadPopulationFile(a, 'panel');

            }

            if(category[category.length - 2] === 'e') {
            var aa = category.slice(0, -1); 

            var a = aa.slice(0, -1);

            loadErosionFile(a);

            }


            if(category === 'population'){
                localStorage.setItem('status', 'population')
                window.location.reload();
            }

            if(category === 'land'){
                localStorage.setItem('status', 'landcover');
                window.location.reload();
            }

            if(category === 'erosion'){
                localStorage.setItem('status', 'erosion');
                window.location.reload();
            }

            if(category === 'compare-land'){
               /* map.eachLayer(function (layer) {
                    map.removeLayer(layer);
                });
                L.control.sideBySide(osm, CartoDB).addTo(map); */
            }

            if(category === 'compare-popz'){
               
                w2ui.sidebar.unselect('compare-popz');
    if (!w2ui.foo3) {
        $().w2form({
            name: 'foo3',
            style: 'border: 0px; background-color: transparent;',
            fields: [
                { field: 'left-year', type: 'list', required: true, html: { label: 'Left Panel' }, options: {
                    items: ['2000', '2005', '2010', '2015', '2020']} },
               { field: 'right-year', type: 'list', required: true, html: { label: 'Right Panel' }, options: {
                   items: ['2000', '2005', '2010', '2015', '2020' ]} }
            ],
            actions: {
                "Reset": function () { this.clear(); },
                "Save": function (event) { 
                    var errors = this.validate();
                    if(errors.length === 0){
                        w2popup.close();
                        $('#map').hide();
                        $('#chart-div').hide();
                        $('#map-comparison').show();

                        $(window).on("resize", function () { $("#map1").height($(window).height() ); }).trigger("resize");
                        $(window).on("resize", function () { $("#map2").height($(window).height() ); }).trigger("resize");

                      if(map1 == null){
                            map1 = new L.map('map1').setView([0.5, 36.819], 6);
                      }
                       
                       if(map2 == null){
                            map2 = new L.map('map2').setView([0.5, 36.819], 6);
                       }

                                map1.eachLayer(function (layer) {
                                map1.removeLayer(layer);
                            });

                                                            map2.eachLayer(function (layer) {
                                map2.removeLayer(layer);
                            });

                            
                            map1.on('zoomend', function(e) {
                                var zoomlevel = map1.getZoom();
                                 map2.setZoom(zoomlevel);
                             });

                             map2.on('zoomend', function(e) {
                                var zoomlevel = map2.getZoom();
                                 map1.setZoom(zoomlevel);
                             });

                       CartoDB = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png', {
	attribution: '&copy; GeopsyResearch, foloo; contributors: <a href="http://cartodb.com/attributions#basemaps">CartoDB</a>',
	subdomains:'abcd',
	minZoom:4,
	maxZoom:21
}).addTo(map1);
                       CartoDB = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png', {
	attribution: '&copy; GeopsyResearch, foloo; contributors: <a href="http://cartodb.com/attributions#basemaps">CartoDB</a>',
	subdomains:'abcd',
	minZoom:4,
	maxZoom:21
}).addTo(map2);

var year1 = '';
var year2 = '';

year1 = $('#left-year').val();
year2 = $('#right-year').val();

document.getElementById('header-left').innerHTML = year1;
document.getElementById('header-right').innerHTML = year2;


    var file = '/data/population.zip';
    var popYear = "pop"+year1;
    w2ui.sidebar.select(year1+'p');
    var fileArr = file.split('-');
    var originalFile = fileArr[0];
	 var geo = L.geoJson({features:[]},{onEachFeature:function popUp(f,l){
            var out = [];
            if (f.properties){
                out.push(f.properties)
                                            l.on('click', function (e) {
                                map1.setView(e.latlng, 12)
                                 map2.setView(e.latlng, 12)
                                });
        l.bindPopup('<table><tr><td><strong>Sublocation</strong></td><td><strong>'+f.properties.SLNAME+'</strong></td></tr><tr><td><strong>2000</strong></td><td>'+Math.round(f.properties.pop2000)+'</td></tr><tr><td><strong>2005</strong></td><td>'+Math.round(f.properties.pop2005)+'</td></tr><tr><td><strong>2010</strong></td><td>'+Math.round(f.properties.pop2010)+'</td></tr><tr><td><strong>2015</strong></td><td>'+Math.round(f.properties.pop2015)+'</td></tr><tr><td><strong>2020</strong></td><td>'+Math.round(f.properties.pop2020)+'</td></tr></table>');

        
    }
    },         
	style: function(feature) {
        var prop;
        switch(year1){
            case '2000':
            prop = feature.properties.pop2000;
            break;

            case '2005':
            prop = feature.properties.pop2005;
            break;

            case '2010':
            prop = feature.properties.pop2010;
            break;

            case '2015':
            prop = feature.properties.pop2015;
            break;

            case '2020':
            prop = feature.properties.pop2020;
            break;

            default:
            console.log('Error!');
        }
            return {
                opacity: 1,
                fillOpacity: 0.7,
                radius: 6,
                weight: 1,
                color: 'white',
                fillColor: getColor(prop)
            }
        },
        pointToLayer: function(feature, latlng) {

                    var prop;
        switch(year1){
            case '2000':
            prop = feature.properties.pop2000;
            break;

            case '2005':
            prop = feature.properties.pop2005;
            break;

            case '2010':
            prop = feature.properties.pop2010;
            break;

            case '2015':
            prop = feature.properties.pop2015;
            break;

            case '2020':
            prop = feature.properties.pop2020;
            break;

            default:
            console.log('Error!');
        }
            return L.circleMarker(latlng, {
                opacity: 1,
                weight: 1,
                fillOpacity: 0.7,
                color: 'white',
                fillColor: getColor(prop)
            });
        }});
    
        shp(file).then(function(data){
        geo.addData(data);
        geo.addTo(map1);
        map1.fitBounds(geo2.getBounds());
        });

        //console.log(geo);
        geo.addTo(map1);

        // creating a canvas chart
    //renderChart(year1);
// end of left year


var file = '/data/population.zip';
    var popYear = "pop"+year2;
    w2ui.sidebar.select(year2+'p');
    var fileArr = file.split('-');
    var originalFile = fileArr[0];
	 var geo3 = L.geoJson({features:[]},{onEachFeature:function popUp(f,layer){
            var out = [];
            if (f.properties){
                out.push(f.properties)
                                            layer.on('click', function (e) {
                                map1.setView(e.latlng, 12)
                                 map2.setView(e.latlng, 12)
                                });
        layer.bindPopup('<table><tr><td><strong>Sublocation</strong></td><td><strong>'+f.properties.SLNAME+'</strong></td></tr><tr><td><strong>2000</strong></td><td>'+Math.round(f.properties.pop2000)+'</td></tr><tr><td><strong>2005</strong></td><td>'+Math.round(f.properties.pop2005)+'</td></tr><tr><td><strong>2010</strong></td><td>'+Math.round(f.properties.pop2010)+'</td></tr><tr><td><strong>2015</strong></td><td>'+Math.round(f.properties.pop2015)+'</td></tr><tr><td><strong>2020</strong></td><td>'+Math.round(f.properties.pop2020)+'</td></tr></table>');

        
    }
    },         
	style: function(feature) {
        var prop;
        switch(year2){
            case '2000':
            prop = feature.properties.pop2000;
            break;

            case '2005':
            prop = feature.properties.pop2005;
            break;

            case '2010':
            prop = feature.properties.pop2010;
            break;

            case '2015':
            prop = feature.properties.pop2015;
            break;

            case '2020':
            prop = feature.properties.pop2020;
            break;

            default:
            console.log('Error!');
        }
            return {
                opacity: 1,
                fillOpacity: 0.7,
                radius: 6,
                weight: 1,
                color: 'white',
                fillColor: getColor(prop)
            }
        },
        pointToLayer: function(feature, latlng) {

                    var prop;
        switch(year2){
            case '2000':
            prop = feature.properties.pop2000;
            break;

            case '2005':
            prop = feature.properties.pop2005;
            break;

            case '2010':
            prop = feature.properties.pop2010;
            break;

            case '2015':
            prop = feature.properties.pop2015;
            break;

            case '2020':
            prop = feature.properties.pop2020;
            break;

            default:
            console.log('Error!');
        }
            return L.circleMarker(latlng, {
                opacity: 1,
                weight: 1,
                fillOpacity: 0.7,
                color: 'white',
                fillColor: getColor(prop)
            });
        }});
    
        shp(file).then(function(data){
        geo3.addData(data);
        geo3.addTo(map2);
        map2.fitBounds(geo3.getBounds());
        });

        //console.log(geo);
        geo3.addTo(map2);

        // creating a canvas chart
    //renderChart(year2);
// end of right year
                    }
                    }
            }
        });
    }
    w2popup.open({
        title   : 'Population comparison',
        body    : '<div id="form3" style="width: 100%; height: 100%;"></div>',
        style   : 'padding: 15px 0px 0px 0px',
        width   : 500,
        height  : 280,
        showMax : true,
        onToggle: function (event) {
            $(w2ui.foo3.box).hide();
            event.onComplete = function () {
                $(w2ui.foo3.box).show();
                w2ui.foo3.resize();
            }
        },
        onOpen: function (event) {
            event.onComplete = function () {
                // specifying an onOpen handler instead is equivalent to specifying an onBeforeOpen handler, which would make this code execute too early and hence not deliver.
                $('#w2ui-popup #form3').w2render('foo3');
            }
        }
    });
                
            }

if(category === 'compare-erosion'){
    if (!w2ui.foo2) {
        $().w2form({
            name: 'foo2',
            style: 'border: 0px; background-color: transparent;',
            fields: [
                { field: 'left-year', type: 'list', required: true, html: { label: 'Left Panel' }, options: {
                    items: ['2000', '2005', '2010', '2015', '2020']} },
               { field: 'right-year', type: 'list', required: true, html: { label: 'Right Panel' }, options: {
                   items: ['2000', '2005', '2010', '2015', '2020' ]} }
            ],
            actions: {
                "Reset": function () { this.clear(); },
            
               "Save": function (event) { 
                    event.preventDefault();
                    
                    var errors = this.validate();
                    if(errors.length === 0){
                            w2popup.close();
                            $('#map').hide();
                            $('#chart-div').hide();
                            $('#map-comparison').show();

                            $(window).on("resize", function () { $("#map1").height($(window).height() ); }).trigger("resize");
                            $(window).on("resize", function () { $("#map2").height($(window).height() ); }).trigger("resize");

                                             if(map1 == null){
                            map1 = new L.map('map1').setView([0.5, 36.819], 6);
                            }
                       
                            if(map2 == null){
                            map2 = new L.map('map2').setView([0.5, 36.819], 6);
                            }

                                map1.eachLayer(function (layer) {
                                map1.removeLayer(layer);
                            });

                                                            map2.eachLayer(function (layer) {
                                map2.removeLayer(layer);
                            });
                                        CartoDB = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png', {
                            attribution: '&copy; GeopsyResearch, foloo; contributors: <a href="http://cartodb.com/attributions#basemaps">CartoDB</a>',
                            subdomains:'abcd',
                            minZoom:4,
                            maxZoom:21
                         }).addTo(map1);
                                        CartoDB = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png', {
                            attribution: '&copy; GeopsyResearch, foloo; contributors: <a href="http://cartodb.com/attributions#basemaps">CartoDB</a>',
                            subdomains:'abcd',
                            minZoom:4,
                            maxZoom:21
                            }).addTo(map2);

                            map1.on('zoomend', function(e) {
                                var zoomlevel = map1.getZoom();
                                 map2.setZoom(zoomlevel);
                             });

                             map2.on('zoomend', function(e) {
                                var zoomlevel = map2.getZoom();
                                 map1.setZoom(zoomlevel);
                             });

                            var year1 = $('#left-year').val();
                            var year2 = $('#right-year').val();

                            document.getElementById('header-left').innerHTML = year1;
                            document.getElementById('header-right').innerHTML = year2;

                            this.clear();

                            var file = '/data/erosion.zip';
                            var fileArr = file.split('-');
                            var originalFile = fileArr[0];
                            var ef = L.geoJson({features:[]},{onEachFeature:function popUp(f,l){
                                var out = [];
                                if (f.properties){
                                    out.push(f.properties)
                                l.on('click', function (e) {
                                map1.setView(e.latlng, 12)
                                 map2.setView(e.latlng, 12)
                                });
                            l.bindPopup('<table><tr><td><strong>SubLocation</strong></td><td><strong>'+f.properties.SLNAME+'</strong></td></tr><tr><td><strong>1995</strong></td><td>'+f.properties.erisk1995m.toFixed(2)+'</td></tr><tr><td><strong>2000</strong></td><td>'+f.properties.erisk2000m.toFixed(2)+'</td></tr><tr><td><strong>2005</strong></td><td>'+f.properties.erisk2005m.toFixed(2)+'</td></tr><tr><td><strong> 2010</strong></td><td>'+f.properties.erisk2010m.toFixed(2)+'</td></tr><tr><td><strong> 2015</strong></td><td>'+f.properties.erisk2015m.toFixed(2)+'</td></tr><tr><td><strong> 2020</strong></td><td>'+f.properties.erisk2020m.toFixed(2)+'</td></tr></table>');

                            
                         }
                            },         
                            style: function(feature) {
                            var prop;
                            switch(year1){


                                case '2000':
                                prop = feature.properties.erisk2000m;
                                break;

                                case '2005':
                                
                                prop = feature.properties.erisk2005m;
                                break;

                                case '2010':
                                prop = feature.properties.erisk2010m;
                                break;

                                case '2015':
                                prop = feature.properties.erisk2015m;
                                break;

                                case '2020':
                                prop = feature.properties.erisk2020m;
                                break;

                                default:
                                console.log('Error!');
                            }
                                return {
                                    opacity: 1,
                                    fillOpacity: 0.7,
                                    radius: 6,
                                    weight: 1,
                                    color: 'white',
                                    fillColor: getErosionColor(prop)
                                }
                            },
                            pointToLayer: function(feature, latlng) {

                            var prop;
                            switch(year1){

                                case '2000':
                                prop = feature.properties.erisk2000m;
                                break;

                                case '2005':
                                prop = feature.properties.erisk2005m;
                                break;

                                case '2010':
                                prop = feature.properties.erisk2010m;
                                break;

                                case '2015':
                                prop = feature.properties.erisk2015m;
                                break;

                                case '2020':
                                prop = feature.properties.erisk2020m;
                                break;

                                default:
                                console.log('Error!');
                            }
                                return L.circleMarker(latlng, {
                                    opacity: 1,
                                    weight: 1,
                                    fillOpacity: 0.7,
                                    color: 'white',
                                    fillColor: getErosionColor(prop)
                                });
                            }});
                        
                            shp(file).then(function(data){
                                geo2.addTo(map1);
                            ef.addData(data);
                            ef.addTo(map1);
                            map1.fitBounds(ef.getBounds());
                        
                            //renderErosionChart(year1);
                            });

                            //console.log(geo);
                            ef.addTo(map1);
                        

                            // creating a canvas chart
                            //renderChart(year1);
                            // end of left year


                            var file = '/data/erosion.zip';
                            var fileArr = file.split('-');
                            var originalFile = fileArr[0];
                            var ef2 = L.geoJson({features:[]},{onEachFeature:function popUp(f,l){
                                var out = [];
                                if (f.properties){
                                    out.push(f.properties)
                                l.on('click', function (e) {
                                map1.setView(e.latlng, 12)
                                 map2.setView(e.latlng, 12)
                                });
                         l.bindPopup('<table><tr><td><strong>SubLocation</strong></td><td><strong>'+f.properties.SLNAME+'</strong></td></tr><tr><td><strong>1995</strong></td><td>'+f.properties.erisk1995m.toFixed(2)+'</td></tr><tr><td><strong>2000</strong></td><td>'+f.properties.erisk2000m.toFixed(2)+'</td></tr><tr><td><strong>2005</strong></td><td>'+f.properties.erisk2005m.toFixed(2)+'</td></tr><tr><td><strong> 2010</strong></td><td>'+f.properties.erisk2010m.toFixed(2)+'</td></tr><tr><td><strong> 2015</strong></td><td>'+f.properties.erisk2015m.toFixed(2)+'</td></tr><tr><td><strong> 2020</strong></td><td>'+f.properties.erisk2020m.toFixed(2)+'</td></tr></table>');

                            
                            }
                         },         
                            style: function(feature) {
                            var prop;
                            switch(year2){


                                case '2000':
                                prop = feature.properties.erisk2000m;
                                break;

                                case '2005':
                                
                                prop = feature.properties.erisk2005m;
                                break;

                                case '2010':
                                prop = feature.properties.erisk2010m;
                                break;

                                case '2015':
                                prop = feature.properties.erisk2015m;
                                break;

                                case '2020':
                                prop = feature.properties.erisk2020m;
                                break;

                                default:
                                console.log('Error!');
                            }
                                return {
                                    opacity: 1,
                                    fillOpacity: 0.7,
                                    radius: 6,
                                    weight: 1,
                                    color: 'white',
                                    fillColor: getErosionColor(prop)
                                }
                            },
                            pointToLayer: function(feature, latlng) {

                            var prop;
                            switch(year2){

                                case '2000':
                                prop = feature.properties.erisk2000m;
                                break;

                                case '2005':
                                prop = feature.properties.erisk2005m;
                                break;

                                case '2010':
                                prop = feature.properties.erisk2010m;
                                break;

                                case '2015':
                                prop = feature.properties.erisk2015m;
                                break;

                                case '2020':
                                prop = feature.properties.erisk2020m;
                                break;

                                default:
                                console.log('Error!');
                            }
                                return L.circleMarker(latlng, {
                                    opacity: 1,
                                    weight: 1,
                                    fillOpacity: 0.7,
                                    color: 'white',
                                    fillColor: getErosionColor(prop)
                                });
                            }});
                        
                            shp(file).then(function(data){
                            ef2.addData(data);
                            ef2.addTo(map2);
                            map2.fitBounds(ef2.getBounds());
                            //geo2.addTo(map2);
                            //renderErosionChart(year1);
                            });

                            //console.log(geo);
                            ef2.addTo(map2);
                            // creating a canvas chart
                            //renderChart(year2);
                           // end of right year
                    }
                }
            }
        });
    }

    w2popup.open({
        title   : 'Soil loss comparison',
        body    : '<div id="form2" style="width: 100%; height: 100%;"></div>',
        style   : 'padding: 15px 0px 0px 0px',
        width   : 500,
        height  : 280,
        showMax : true,
        onToggle: function (event) {
            $(w2ui.foo2.box).hide();
            event.onComplete = function () {
                $(w2ui.foo2.box).show();
                w2ui.foo2.resize();
            }
        },
        onOpen: function (event) {
            event.onComplete = function () {
                // specifying an onOpen handler instead is equivalent to specifying an onBeforeOpen handler, which would make this code execute too early and hence not deliver.
                $('#w2ui-popup #form2').w2render('foo2');
            }
        }
    });
            }
        }
    });

function comparePopulation(year1, year2){

}

function compareErosion(year1, year2){

}

if(localStorage.getItem('status') == 'population'){
    w2ui.sidebar.collapse('land');
    w2ui.sidebar.collapse('erosion');
    w2ui.sidebar.expand('population')
    w2ui.sidebar.select('population');
    
    var chartdiv =document.getElementById('chart-div');
    chartdiv.innerHTML = '';

    var div1 = document.createElement('div');
    div1.classList = 'col-md-3 col-lg-3';

    var div2 = document.createElement('div');
    div2.classList = 'col-md-6 col-lg-6';
    div2.id = 'charts-div2';

    var div3 = document.createElement('div');
    div3.classList = 'col-md-3 col-lg-3';

    chartdiv.appendChild(div1);
    chartdiv.appendChild(div2);
    chartdiv.appendChild(div3);

    var p = document.createElement('p');
    p.innerHTML = 'Yearly population statistics';
    div2.appendChild(p);

    var canvas = document.createElement('canvas');
    canvas.id = 'canvas';
    canvas.style.background = '#fff';
    canvas.style.width = '100%';

    div2.appendChild(canvas);

    // adding population vector files.
    loadPopulationFile(null)
    renderChart(null);
     w2ui.sidebar.click('2000p');
}

if(localStorage.getItem('status') == 'landcover'){
    w2ui.sidebar.collapse('population');
    w2ui.sidebar.collapse('erosion');
    w2ui.sidebar.expand('land');
    w2ui.sidebar.select('land');

    $('#pop-no').show();

            map.eachLayer(function (layer) {
    map.removeLayer(layer);
});
CartoDB.addTo(map);
geo2.addTo(map);
}

if(localStorage.getItem('status') == 'erosion'){
    w2ui.sidebar.collapse('population');
    w2ui.sidebar.collapse('land');
    w2ui.sidebar.expand('erosion');
    w2ui.sidebar.select('erosion');

   // $('#pop-no').show();
   var div = document.getElementById('pops-no');
   div.innerHTML = '';
    loadErosionFile(null);

     w2ui.sidebar.click('2000ee');
}
	//w2ui.sidebar.click('land');
});

function getColor(p){
    return p > 50000 ? '#bd0026' :
				p > 5000  ? '#f03b20' :
				p > 2000  ? '#fd8d3c' :
				p > 1000   ? '#fecc5c' :
				p > 500   ? '#ffffb2' :
					   '#FFEDA0';   
}

function getErosionColor(p){

    return p > 10 ? '#d7191c' :
				p > 5  ? '#fdae61' :
				p > 2  ? '#ffffbf' :
				p > 1   ? '#a6d96a' :
					   '#1a9641';   
}


function renderChart(year){
    if(year == 'null'){
            var xValues = ["2000", "2005", "2010", "2015", "2020"];
            var yValues = [442421, 528074, 632391, 752015, 877032];
            var barColors =  ['cyan', 'cyan', 'cyan', 'cyan', 'cyan'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            borderWidth: 1,
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Yearly total population in L.Baringo basin"
                },
                                scales: {
                    yAxes: [
                    {
                        ticks: {
                        min: 0, // it is for ignoring negative step.
                        beginAtZero: true,
                        callback: function(value, index, values) {
                            if ((value % 100000) === 0 ) {
                                return value;
                            }
                        }
                    }
                    }
                    ]
                }
            }
            });
    } else {
        switch(year){
            case '2000':
            var xValues = ["2000", "2005", "2010", "2015", "2020"];
            var yValues = [442421, 528074, 632391, 752015, 877032];
            var barColors =  ['red', 'cyan', 'cyan', 'cyan', 'cyan'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            borderWidth: 1,
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Yearly total population in L.Baringo basin"
                },
                scales: {
                    yAxes: [
                    {
                        ticks: {
                        min: 0, // it is for ignoring negative step.
                        beginAtZero: true,
                        callback: function(value, index, values) {
                            if ((value % 100000) === 0 ) {
                                return value;
                            }
                        }
                    }
                    }
                    ]
                }
            }
            });

            break;

            case '2005':
            var xValues = ["2000", "2005", "2010", "2015", "2020"];
            var yValues = [442421, 528074, 632391, 752015, 877032];
            var barColors =  ['cyan', 'red', 'cyan', 'cyan', 'cyan'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            borderWidth: 1,
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Yearly total population in L.Baringo basin"
                },
                                scales: {
                    yAxes: [
                    {
                        ticks: {
                        min: 0, // it is for ignoring negative step.
                        beginAtZero: true,
                        callback: function(value, index, values) {
                            if ((value % 100000) === 0 ) {
                                return value;
                            }
                        }
                    }
                    }
                    ]
                }
            }
            });

            break;

            case '2010':
            var xValues = ["2000", "2005", "2010", "2015", "2020"];
            var yValues = [442421, 528074, 632391, 752015, 877032];
            var barColors =  ['cyan', 'cyan', 'red', 'cyan', 'cyan'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            borderWidth: 1,
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Yearly total population in L.Baringo basin"
                },
                                scales: {
                    yAxes: [
                    {
                        ticks: {
                        min: 0, // it is for ignoring negative step.
                        beginAtZero: true,
                        callback: function(value, index, values) {
                            if ((value % 100000) === 0 ) {
                                return value;
                            }
                        }
                    }
                    }
                    ]
                }
            }
            });

            break;

            case '2015':
            var xValues = ["2000", "2005", "2010", "2015", "2020"];
            var yValues = [442421, 528074, 632391, 752015, 877032];
            var barColors =  ['cyan', 'cyan', 'cyan', 'red', 'cyan'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            borderWidth: 1,
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Yearly total population in L.Baringo basin"
                },
                                scales: {
                    yAxes: [
                    {
                        ticks: {
                        min: 0, // it is for ignoring negative step.
                        beginAtZero: true,
                        callback: function(value, index, values) {
                            if ((value % 100000) === 0 ) {
                                return value;
                            }
                        }
                    }
                    }
                    ]
                }
            }
            });

            break;

            case '2020':
            var xValues = ["2000", "2005", "2010", "2015", "2020"];
            var yValues = [442421, 528074, 632391, 752015, 877032];
            var barColors =  ['cyan', 'cyan', 'cyan', 'cyan', 'red'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            borderWidth: 1,
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Yearly total population in L.Baringo basin"
                },
                                scales: {
                    yAxes: [
                    {
                        ticks: {
                        min: 0, // it is for ignoring negative step.
                        beginAtZero: true,
                        callback: function(value, index, values) {
                            if ((value % 100000) === 0 ) {
                                return value;
                            }
                        }
                    }
                    }
                    ]
                }
            }
            });

            break;
        }
    }
}

function renderErosionChart(year){
        if(year === null){
            var xValues = ["2000", "2005", "2010", "2015", "2020"];
            var yValues = [ 5.35, 6.53, 7.36, 5.03, 7.50];
            var barColors =  [ 'orange', 'orange', 'orange', 'orange', 'orange'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Average soil loss in L.Baringo basin"
                }
            }
            });
    } else {
        switch(year){

            case '2000':
            var xValues = [ "2000", "2005", "2010", "2015", "2020"];
           var yValues = [ 5.35, 6.53, 7.36, 5.03, 7.50];
            var barColors = [ 'blue', 'orange', 'orange', 'orange', 'orange'];
                    $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Average soil loss in L.Baringo basin"
                }
            }
            });

         var div = document.getElementById('pops-no');
             div.innerHTML = '';

            div.innerHTML = '<table class="table" style="margin-top: 40px; width: 95%; height: 70%;"><thead><tr><td><strong>Class</strong></td><td><strong>Number of SubLocations</strong></td></tr></thead><tbody><tr><td>Very Low</td><td><center>6</center></td></tr><tr><td>Low</td><td><center>46</center></td></tr><tr><td>Moderate</td><td><center>68</center></td></tr><tr><td>Severe</td><td><center>75</center></td></tr><tr><td>Very Severe</td><td><center>24</center></td></tr></tbody></table>'

            break;

            case '2005':
            var xValues = [ "2000", "2005", "2010", "2015", "2020"];
           var yValues = [ 5.35, 6.53, 7.36, 5.03, 7.50];
            var barColors = [ 'orange', 'blue', 'orange', 'orange', 'orange'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Average soil loss in L.Baringo basin"
                }
            }
            });

             var div = document.getElementById('pops-no');
             div.innerHTML = '';

            div.innerHTML = '<table class="table" style="margin-top: 40px; width: 95%; height: 70%;"><thead><tr><td><strong>Class</strong></td><td><strong>Number of SubLocations</strong></td></tr></thead><tbody><tr><td>Very Low</td><td><center>5</center></td></tr><tr><td>Low</td><td><center>32</center></td></tr><tr><td>Moderate</td><td><center>73</center></td></tr><tr><td>Severe</td><td><center>65</center></td></tr><tr><td>Very Severe</td><td><center>44</center></td></tr></tbody></table>'

            break;

            case '2010':
            var xValues = ["2000", "2005", "2010", "2015", "2020"];
            var yValues = [ 5.35, 6.53, 7.36, 5.03, 7.50];
            var barColors = [ 'orange', 'orange', 'blue', 'orange', 'orange'];
                     $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Average soil loss in L.Baringo basin"
                }
            }
            });

             var div = document.getElementById('pops-no');
             div.innerHTML = '';

            div.innerHTML = '<table class="table" style="margin-top: 40px; width: 95%; height: 70%;"><thead><tr><td><strong>Class</strong></td><td><strong>Number of SubLocations</strong></td></tr></thead><tbody><tr><td>Very Low</td><td><center>2</center></td></tr><tr><td>Low</td><td><center>26</center></td></tr><tr><td>Moderate</td><td><center>75</center></td></tr><tr><td>Severe</td><td><center>64</center></td></tr><tr><td>Very Severe</td><td><center>52</center></td></tr></tbody></table>'

            break;

            case '2015':
            var xValues = [ "2000", "2005", "2010", "2015", "2020"];
           var yValues = [5.35, 6.53, 7.36, 5.03, 7.50];
            var barColors = [ 'orange', 'orange', 'orange', 'blue', 'orange'];
                    $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Average soil loss in L.Baringo basin"
                }
            }
            });

             var div = document.getElementById('pops-no');
             div.innerHTML = '';

            div.innerHTML = '<table class="table" style="margin-top: 40px; width: 95%; height: 70%;"><thead><tr><td><strong>Class</strong></td><td><strong>Number of SubLocations</strong></td></tr></thead><tbody><tr><td>Very Low</td><td><center>12</center></td></tr><tr><td>Low</td><td><center>34</center></td></tr><tr><td>Moderate</td><td><center>90</center></td></tr><tr><td>Severe</td><td><center>64</center></td></tr><tr><td>Very Severe</td><td><center>19</center></td></tr></tbody></table>'


            break;

            case '2020':
                 var xValues = [ "2000", "2005", "2010", "2015", "2020"];
            var yValues = [ 5.35, 6.53, 7.36, 5.03, 7.50];
            var barColors = [ 'orange', 'orange', 'orange', 'orange', 'blue'];
         $('#canvas').remove();
            $('#charts-div2').append('<canvas id="canvas" style="background-color: #fff;width: 100%;"></canvas>');
            document.getElementById('canvas').style.height = '80%';
            new Chart("canvas", {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Average soil loss in L.Baringo basin"
                }
            }
            });

             var div = document.getElementById('pops-no');
             div.innerHTML = '';

            div.innerHTML = '<table class="table" style="margin-top: 40px; width: 95%; height: 70%;"><thead><tr><td><strong>Class</strong></td><td><strong>Number of SubLocations</strong></td></tr></thead><tbody><tr><td>Very Low</td><td><center>7</center></td></tr><tr><td>Low</td><td><center>20</center></td></tr><tr><td>Moderate</td><td><center>74</center></td></tr><tr><td>Severe</td><td><center>58</center></td></tr><tr><td>Very Severe</td><td><center>60</center></td></tr></tbody></table>'

            break;
        }
    }
}

function loadErosionFile(year){
    if(year === null){
                  w2ui.sidebar.click('2000ee');
           w2ui.sidebar.select('2000ee');
        var file = '/data/erosion.zip';

    let fileArr = file.split('-');
    var originalFile = fileArr[0];
	var eFile = L.geoJson({features:[]},{onEachFeature:function popUp(f,l){
            var out = [];
            if (f.properties){
                out.push(f.properties)
        l.bindPopup('<table><tr><td><strong>Name</strong></td><td>'+f.properties.SLNAME+'</td></tr><tr><td><strong>Erosion Risk - 1995</strong></td><td>'+f.properties.erisk1995m+'</td></tr><tr><td><strong>Erosion Risk - 2000</strong></td><td>'+f.properties.erisk2000m+'</td></tr><tr><td><strong>Erosion Risk - 2005</strong></td><td>'+f.properties.erisk2005m+'</td></tr><tr><td><strong>Erosion Risk - 2010</strong></td><td>'+f.properties.erisk2010m+'</td></tr><tr><td><strong>Erosion Risk - 2015</strong></td><td>'+f.properties.erisk2015m+'</td></tr><tr><td><strong>Erosion Risk - 2020</strong></td><td>'+f.properties.erisk2020m+'</td></tr></table>');
    }
    },         
	style: function(feature) {
            return {
                opacity: 1,
                weight: 1,
                fillOpacity: 0.7,
                radius: 6,
                color: 'white',
                fillColor: '#fdae6b'
            }
        },
        pointToLayer: function(feature, latlng) {
            return L.circleMarker(latlng, {
                opacity: 1,
                weight: 1,
                fillOpacity: 0.7,
                color: 'white',
                fillColor: '#fdae6b'
            });
        }});
                                    var legend = L.control({position: 'bottomright'});
            legend.onAdd = function (map) {
                        var div = L.DomUtil.create('div', 'info legend');
                labels = ['<strong>Classes</strong>'],
                categories = ['Very low','Low','Moderate','Severe','Very severe'];
                var colors = ['#1a9641', '#a6d96a', '#ffffbf', '#fdae61', '#d7191c' ]
                for (var i = 0; i < categories.length; i++) {
                    for(var k=0; k < colors.length; k++){
                        if(i === k){
                        div.innerHTML += 
                        labels.push(
                            '<i style="background:' + colors[k] + '"></i> ' +
                            (categories[i] ? categories[i] : '+'));
                        }
                    }
                    }

                div.innerHTML = labels.join('<br>');
                return div;
            };

           
    
        shp(file).then(function(data){
        eFile.addData(data);
        //eFile.addTo(map);
        map.fitBounds(eFile.getBounds());
               geo2.addTo(map);
         legend.addTo(map);
        renderErosionChart(null);
        });

        //console.log(geo);
        eFile.addTo(map);
    } else {
        map.eachLayer(function (layer) {
    map.removeLayer(layer);
});
CartoDB.addTo(map);
    var file = '/data/erosion.zip';
    let fileArr = file.split('-');
    var originalFile = fileArr[0];
	 var ef = L.geoJson({features:[]},{onEachFeature:function popUp(f,l){
            var out = [];
            if (f.properties){
                out.push(f.properties)
       l.bindPopup('<table><tr><td><strong>SubLocation</strong></td><td><strong>'+f.properties.SLNAME+'</strong></td></tr><tr><td><strong>1995</strong></td><td>'+f.properties.erisk1995m.toFixed(2)+'</td></tr><tr><td><strong>2000</strong></td><td>'+f.properties.erisk2000m.toFixed(2)+'</td></tr><tr><td><strong>2005</strong></td><td>'+f.properties.erisk2005m.toFixed(2)+'</td></tr><tr><td><strong> 2010</strong></td><td>'+f.properties.erisk2010m.toFixed(2)+'</td></tr><tr><td><strong> 2015</strong></td><td>'+f.properties.erisk2015m.toFixed(2)+'</td></tr><tr><td><strong> 2020</strong></td><td>'+f.properties.erisk2020m.toFixed(2)+'</td></tr></table>');

        
    }
    },         
	style: function(feature) {
        var prop;
        switch(year){


            case '2000':
            prop = feature.properties.erisk2000m;
            break;

            case '2005':
            
            prop = feature.properties.erisk2005m;
            break;

            case '2010':
            prop = feature.properties.erisk2010m;
            break;

            case '2015':
            prop = feature.properties.erisk2015m;
            break;

            case '2020':
            prop = feature.properties.erisk2020m;
            break;

            default:
            console.log('Error!');
        }
            return {
                opacity: 1,
                fillOpacity: 0.7,
                radius: 6,
                weight: 1,
                color: 'white',
                fillColor: getErosionColor(prop)
            }
        },
        pointToLayer: function(feature, latlng) {

        var prop;
        switch(year){

            case '2000':
            prop = feature.properties.erisk2000m;
            break;

            case '2005':
            prop = feature.properties.erisk2005m;
            break;

            case '2010':
            prop = feature.properties.erisk2010m;
            break;

            case '2015':
            prop = feature.properties.erisk2015m;
            break;

            case '2020':
            prop = feature.properties.erisk2020m;
            break;

            default:
            console.log('Error!');
        }
            return L.circleMarker(latlng, {
                opacity: 1,
                weight: 1,
                fillOpacity: 0.7,
                color: 'white',
                fillColor: getErosionColor(prop)
            });
        }});
    
        shp(file).then(function(data){
        ef.addData(data);
        ef.addTo(map);
        map.fitBounds(ef.getBounds());
        geo2.addTo(map);
        renderErosionChart(year);
        });

        //console.log(geo);
        ef.addTo(map);
    }
}

function loadPopulationFile(year, panel){
    if(year == null){
                 w2ui.sidebar.click('2000p');
          w2ui.sidebar.select('2000p');
    var file = '/data/population.zip';

    let fileArr = file.split('-');
    var originalFile = fileArr[0];
	var geo = L.geoJson({features:[]},{onEachFeature:function popUp(f,l){
            var out = [];
            if (f.properties){
                out.push(f.properties)
        l.bindPopup('<table><tr><td><strong>Name</strong></td><td>'+f.properties.SLNAME+'</td></tr><tr><td><strong>Population - 2000</strong></td><td>'+f.properties.pop2000+'</td></tr><tr><td><strong>Population - 2005</strong></td><td>'+f.properties.pop2005+'</td></tr><tr><td><strong>Population - 2010</strong></td><td>'+f.properties.pop2010+'</td></tr><tr><td><strong>Population - 2015</strong></td><td>'+f.properties.pop2015+'</td></tr><tr><td><strong>Population - 2020</strong></td><td>'+f.properties.pop2020+'</td></tr></table>');
    }
    },         
	style: function(feature) {
            return {
                opacity: 1,
                weight: 1,
                fillOpacity: 0.7,
                radius: 6,
                color: 'white',
                fillColor: 'transparent'
            }
        },
        pointToLayer: function(feature, latlng) {
            return L.circleMarker(latlng, {
                opacity: 1,
                weight: 1,
                fillOpacity: 0.7,
                color: 'white',
                fillColor: 'transparent'
            });
        }});



             var legend = L.control({position: 'bottomright'});
            legend.onAdd = function (map) {
                        var div = L.DomUtil.create('div', 'info legend');
                labels = ['<strong>Classes</strong>'],
                categories = ['< 500','500-1000','1000-2000','2000-5000','> 5000'];
                var colors = [ '#ffffb2', '#fecc5c', '#fd8d3c', '#f03b20', '#bd0026' ]
                for (var i = 0; i < categories.length; i++) {
                    for(var k=0; k < colors.length; k++){
                        if(i === k){
                        div.innerHTML += 
                        labels.push(
                            '<i style="background:' + colors[k] + '"></i> ' +
                            (categories[i] ? categories[i] : '+'));
                        }
                    }
                    }

                div.innerHTML = labels.join('<br>');
                return div;
            };

    
        shp(file).then(function(data){
        geo.addData(data);
        legend.addTo(map);
        geo.addTo(map);
    
        renderChart('null');
        map.fitBounds(geo.getBounds());
        });

        //console.log(geo);
        geo.addTo(map);
    

    } else {
        map.eachLayer(function (layer) {
    map.removeLayer(layer);
});
CartoDB.addTo(map);
    var file = '/data/population.zip';
    var popYear = "pop"+year;
    let fileArr = file.split('-');
    var originalFile = fileArr[0];
	 var geo = L.geoJson({features:[]},{onEachFeature:function popUp(f,l){
            var out = [];
            if (f.properties){
                out.push(f.properties)

        l.bindPopup('<table><tr><td><strong>Sublocation</strong></td><td><strong>'+f.properties.SLNAME+'</strong></td></tr><tr><td><strong>2000</strong></td><td>'+Math.round(f.properties.pop2000)+'</td></tr><tr><td><strong>2005</strong></td><td>'+Math.round(f.properties.pop2005)+'</td></tr><tr><td><strong>2010</strong></td><td>'+Math.round(f.properties.pop2010)+'</td></tr><tr><td><strong>2015</strong></td><td>'+Math.round(f.properties.pop2015)+'</td></tr><tr><td><strong>2020</strong></td><td>'+Math.round(f.properties.pop2020)+'</td></tr></table>');

        
    }
    },         
	style: function(feature) {
        var prop;
        switch(year){
            case '2000':
            prop = feature.properties.pop2000;
            break;

            case '2005':
            prop = feature.properties.pop2005;
            break;

            case '2010':
            prop = feature.properties.pop2010;
            break;

            case '2015':
            prop = feature.properties.pop2015;
            break;

            case '2020':
            prop = feature.properties.pop2020;
            break;

            default:
            console.log('Error!');
        }
            return {
                opacity: 1,
                fillOpacity: 0.7,
                radius: 6,
                weight: 1,
                color: 'white',
                fillColor: getColor(prop)
            }
        },
        pointToLayer: function(feature, latlng) {

                    var prop;
        switch(year){
            case '2000':
            prop = feature.properties.pop2000;
            break;

            case '2005':
            prop = feature.properties.pop2005;
            break;

            case '2010':
            prop = feature.properties.pop2010;
            break;

            case '2015':
            prop = feature.properties.pop2015;
            break;

            case '2020':
            prop = feature.properties.pop2020;
            break;

            default:
            console.log('Error!');
        }
            return L.circleMarker(latlng, {
                opacity: 1,
                weight: 1,
                fillOpacity: 0.7,
                color: 'white',
                fillColor: getColor(prop)
            });
        }});
    
        shp(file).then(function(data){
        geo.addData(data);
        geo.addTo(map);
        map.fitBounds(geo.getBounds());
        geo2.addTo(map);
        });

        //console.log(geo);
        geo.addTo(map);

        // creating a canvas chart
    renderChart(year);
    }
}
$(document).on('click', '#compare_btn', function(){
    if(localStorage.getItem('status') == 'population'){
           var year1 = document.getElementById('year3').value;
    var year2 = document.getElementById('year4').value;

    compareYears(year1, year2);
    } else {
            var year1 = document.getElementById('year1').value;
    var year2 = document.getElementById('year2').value;

    compareYears(year1, year2);
    }
})

function compareYears(year1, year2){
$('#canvas2').remove();
$('#pops-no').append('<canvas id="canvas2" style="background-color: #fff;width: 100%;"></canvas>');
document.getElementById('canvas2').style.height = '68%';
    if(localStorage.getItem('status') === 'landcover'){
let _1995 = new Object();
_1995.data = [120.60, 966.14, 972.80, 156.58, 13.99, 739.59, 3692.63, 0.67];

let _2000 = new Object();
_2000.data = [130.59, 2318.06, 600.34, 269.85, 22.65, 678.29, 2639.21, 4.00];

let _2005 = new Object();
_2005.data = [135.26, 2379.36, 663.63, 135.93, 20.66, 664.97, 2663.20, 0.67];

let _2010 = new Object();
_2010.data = [143.25, 1559.14, 840.87, 139.26, 2.67, 1429.21, 2547.93, 1.33];

let _2015 = new Object();
_2015.data = [247.86, 1681.74, 572.35, 206.55, 76.62, 273.85, 3602.02, 2.00];

let _2020 = new Object();
_2020.data = [206.55, 1620.44, 974.80, 63.30, 32.65, 142.59, 3615.34, 6.66];

let dataset1 = new Object();
let dataset2 = new Object();

switch(year1){
    case '1995':
    dataset1.label = '1995';
    dataset1.data = _1995.data;
    dataset1.lineTension = 0;
    dataset1.fill = false;
    dataset1.borderColor = 'red';
    break;

    case '2000':
     dataset1.label = '2000';
    dataset1.data = _2000.data;
    dataset1.lineTension = 0;
    dataset1.fill = false;
    dataset1.borderColor = 'red';
    break;

    case '2005':
     dataset1.label = '2005';
    dataset1.data = _2005.data;
    dataset1.lineTension = 0;
    dataset1.fill = false;
    dataset1.borderColor = 'red';
    break;

    case '2010':
     dataset1.label = '2010';
    dataset1.data = _2010.data;
    dataset1.lineTension = 0;
    dataset1.fill = false;
    dataset1.borderColor = 'red';
    break;

    case '2015':
     dataset1.label = '2015';
    dataset1.data = _2015.data;
    dataset1.lineTension = 0;
    dataset1.fill = false;
    dataset1.borderColor = 'red';
    break;

    case '2020':
    dataset1.label = '2020';
    dataset1.data = _2020.data;
    dataset1.lineTension = 0;
    dataset1.fill = false;
    dataset1.borderColor = 'red';
    break;

    default:
    console.log("Error!");

}

switch(year2){
    case '1995':
     dataset2.label = '1995';
    dataset2.data = _1995.data;
    dataset2.lineTension = 0;
    dataset2.fill = false;
    dataset2.borderColor = 'blue';
    break;

    case '2000':
     dataset2.label = '2000';
    dataset2.data = _2000.data;
    dataset2.lineTension = 0;
    dataset2.fill = false;
    dataset2.borderColor = 'blue';
    break;

    case '2005':
     dataset2.label = '2005';
    dataset2.data = _2005.data;
    dataset2.lineTension = 0;
    dataset2.fill = false;
    dataset2.borderColor = 'blue';
    break;

    case '2010':
     dataset2.label = '2010';
    dataset2.data = _2010.data;
    dataset2.lineTension = 0;
    dataset2.fill = false;
    dataset2.borderColor = 'blue';
    break;

    case '2015':
     dataset2.label = '2015';
    dataset2.data = _2015.data;
    dataset2.lineTension = 0;
    dataset2.fill = false;
    dataset2.borderColor = 'blue';
    break;

    case '2020':
     dataset2.label = '2020';
    dataset2.data = _2020.data;
    dataset2.lineTension = 0;
    dataset2.fill = false;
    dataset2.borderColor = 'blue';
    break;

    default:
    console.log('Error!');
}

let finaldata = {
  labels: [" Water Body", "CropLand", "Forestland", "Settlement", "Vegetated Wetland", "Open Grassland", "Wooded Grassland", "Others"],
  datasets: [dataset1, dataset2]
};

let chartOptions = {
  legend: {
    display: true,
    position: 'top',
    labels: {
      boxWidth: 80,
      fontColor: 'black'
    }
  }
};

let lineChart = new Chart(canvas2, {
  type: 'line',
  data: finaldata,
  options: chartOptions
});
    } else if(localStorage.getItem('status') === 'population'){
        var yValues = [];
        switch(year1){
            case '2000':
            yValues.push(442421);
            break;

            case '2005':
            yValues.push(528074);
            break;

            case '2010':
            yValues.push(632391);
            break;

            case '2015':
            yValues.push(752015);
            break;

            case '2020':
            yValues.push(877032);
            break;

            default:
            console.log('error!');
        }

    

        switch(year2){
            case '2000':
            yValues.push(442421);
            break;

            case '2005':
            yValues.push(528074);
            break;

            case '2010':
            yValues.push(632391);
            break;

            case '2015':
            yValues.push(752015);
            break;

            case '2020':
            yValues.push(877032);
            break;

            default:
            console.log('error!');
        }

            let xValues = [year1, year2];
            let barColors =  ['red', 'cyan'];

            new Chart(canvas2, {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Population comparison - "+ year1 + " AND "+year2
                }
            }
            });
    } else {
         var yValues = [];
        switch(year1){
            case '1995':
            yValues.push(16);
            break;

            case '2000':
            yValues.push(1171);
            break;

            case '2005':
            yValues.push(1429);
            break;

            case '2010':
            yValues.push(1611);
            break;

            case '2015':
            yValues.push(1102);
            break;

            case '2020':
            yValues.push(1642);
            break;

            default:
            console.log('error!');
        }

    

        switch(year2){
            case '1995':
            yValues.push(16);
            break;

            case '2000':
            yValues.push(1171);
            break;

            case '2005':
            yValues.push(1429);
            break;

            case '2010':
            yValues.push(1611);
            break;

            case '2015':
            yValues.push(1102);
            break;

            case '2020':
            yValues.push(1642);
            break;

            default:
            console.log('error!');
        }

            var xValues = [year1, year2];
            var barColors =  ['red', 'cyan'];

            new Chart(canvas2, {
            type: "bar",
            data: {
                labels: xValues,
                datasets: [{
                backgroundColor: barColors,
                data: yValues
                }]
            },
            options: {
                legend: {display: false},
                title: {
                display: true,
                text: "Soil Loss comparison - "+ year1 + " AND "+year2
                }
            }
            });
    }
}


$(function() {
map = new L.map('map').setView([0.5, 36.819], 6);
// add basemaps from cartodb - darkmatter.
CartoDB = L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}.png', {
	attribution: '&copy; GeopsyResearch, foloo; contributors: <a href="http://cartodb.com/attributions#basemaps">CartoDB</a>',
	subdomains:'abcd',
	minZoom:4,
	maxZoom:15
}).addTo(map);
// add the second basemap from OSM
 osm = L.tileLayer ('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{
	attribution: '&copy; OSM',
	minZoom: 4,
	maxZoom: 15
});

	var file = '/data/baringo/baringo_catchment.zip';

    let fileArr = file.split('-');
    var originalFile = fileArr[0];

	     geo2 = L.geoJson({features:[]},{onEachFeature:function popUp(f,l){
            var out = [];
            if (f.properties){
                for(var key in f.properties){
                out.push(key);
        }
        //l.bindPopup(out.join("<br />"));
    }
    },         
	style: function(feature) {
            return {
                opacity: 1,
                weight: 1,
                fillOpacity: 0.7,
                radius: 6,
                color: 'black',
                fillColor: 'transparent'
            }
        },
        pointToLayer: function(feature, latlng) {
            return L.circleMarker(latlng, {
                opacity: 1,
                weight: 2,
                fillOpacity: 0.7,
                color: 'black',
                fillColor: 'transparent'
            });
        }});
    
        shp(file).then(function(data){
        geo2.addData(data);
        geo2.addTo(map);
        map.fitBounds(geo2.getBounds());
        });

        //console.log(geo);
        geo2.addTo(map);

        var baseLayers = {
            "CartoDB": CartoDB,
            "OSM": osm
        };

       lc = L.control.layers(baseLayers).addTo(map);

})

</script>
</body>
</html> 

